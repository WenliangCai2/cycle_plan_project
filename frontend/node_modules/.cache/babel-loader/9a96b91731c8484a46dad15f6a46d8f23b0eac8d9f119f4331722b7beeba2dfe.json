{"ast":null,"code":"/**\r\n * 路线相关API服务\r\n */\nimport axios from 'axios';\n\n// API基础URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 添加认证token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n/**\r\n * 获取用户的所有路线\r\n * @returns {Promise} - 包含路线列表的Promise\r\n */\nexport const getRoutes = async () => {\n  try {\n    const response = await api.get('/routes');\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      success: false,\n      message: '获取路线失败'\n    };\n  }\n};\n\n/**\r\n * 创建新的路线\r\n * @param {Object} route - 路线信息\r\n * @param {string} route.name - 路线名称\r\n * @param {Array} route.locations - 路线包含的位置点\r\n * @returns {Promise} - 包含创建结果的Promise\r\n */\nexport const createRoute = async route => {\n  try {\n    const response = await api.post('/routes', {\n      route\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      success: false,\n      message: '创建路线失败'\n    };\n  }\n};\n\n/**\r\n * 删除路线\r\n * @param {string} routeId - 路线ID\r\n * @returns {Promise} - 包含删除结果的Promise\r\n */\nexport const deleteRoute = async routeId => {\n  try {\n    const response = await api.delete(`/routes/${routeId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n      success: false,\n      message: '删除路线失败'\n    };\n  }\n};\nexport default {\n  getRoutes,\n  createRoute,\n  deleteRoute\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","getRoutes","response","get","data","_error$response","success","message","createRoute","route","post","_error$response2","deleteRoute","routeId","delete","_error$response3"],"sources":["C:/Users/caiwenliang/PycharmProjects/React-Flask-demo2/frontend/src/api/routeApi.js"],"sourcesContent":["/**\r\n * 路线相关API服务\r\n */\r\nimport axios from 'axios';\r\n\r\n// API基础URL\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 添加认证token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = token;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * 获取用户的所有路线\r\n * @returns {Promise} - 包含路线列表的Promise\r\n */\r\nexport const getRoutes = async () => {\r\n  try {\r\n    const response = await api.get('/routes');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { success: false, message: '获取路线失败' };\r\n  }\r\n};\r\n\r\n/**\r\n * 创建新的路线\r\n * @param {Object} route - 路线信息\r\n * @param {string} route.name - 路线名称\r\n * @param {Array} route.locations - 路线包含的位置点\r\n * @returns {Promise} - 包含创建结果的Promise\r\n */\r\nexport const createRoute = async (route) => {\r\n  try {\r\n    const response = await api.post('/routes', { route });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { success: false, message: '创建路线失败' };\r\n  }\r\n};\r\n\r\n/**\r\n * 删除路线\r\n * @param {string} routeId - 路线ID\r\n * @returns {Promise} - 包含删除结果的Promise\r\n */\r\nexport const deleteRoute = async (routeId) => {\r\n  try {\r\n    const response = await api.delete(`/routes/${routeId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { success: false, message: '删除路线失败' };\r\n  }\r\n};\r\n\r\nexport default {\r\n  getRoutes,\r\n  createRoute,\r\n  deleteRoute,\r\n}; "],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAGH,KAAK;EACtC;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA,IAAAO,eAAA;IACd,MAAM,EAAAA,eAAA,GAAAP,KAAK,CAACI,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBD,IAAI,KAAI;MAAEE,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAS,CAAC;EACrE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;EAC1C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMhB,GAAG,CAACwB,IAAI,CAAC,SAAS,EAAE;MAAED;IAAM,CAAC,CAAC;IACrD,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA,IAAAa,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAb,KAAK,CAACI,QAAQ,cAAAS,gBAAA,uBAAdA,gBAAA,CAAgBP,IAAI,KAAI;MAAEE,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAS,CAAC;EACrE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,WAAW,GAAG,MAAOC,OAAO,IAAK;EAC5C,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMhB,GAAG,CAAC4B,MAAM,CAAC,WAAWD,OAAO,EAAE,CAAC;IACvD,OAAOX,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA,IAAAiB,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAjB,KAAK,CAACI,QAAQ,cAAAa,gBAAA,uBAAdA,gBAAA,CAAgBX,IAAI,KAAI;MAAEE,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAS,CAAC;EACrE;AACF,CAAC;AAED,eAAe;EACbN,SAAS;EACTO,WAAW;EACXI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}