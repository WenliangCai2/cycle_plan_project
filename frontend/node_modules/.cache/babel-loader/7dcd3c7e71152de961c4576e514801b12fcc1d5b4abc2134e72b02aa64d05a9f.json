{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caiwenliang\\\\Desktop\\\\Course\\\\courseWork\\\\cycle_web\\\\src\\\\Map.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = props => {\n  _s();\n  const mapRef = useRef(null);\n  const map = useRef(null);\n  const platform = useRef(null);\n  const {\n    apikey,\n    userPosition,\n    restaurantPosition\n  } = props;\n  useEffect(() => {\n    if (!map.current) {\n      platform.current = new H.service.Platform({\n        apikey\n      });\n      const defaultLayers = platform.current.createDefaultLayers({\n        pois: true\n      });\n      const newMap = new H.Map(mapRef.current, defaultLayers.vector.normal.map, {\n        zoom: 14,\n        center: userPosition // ✅ 使用动态用户位置\n      });\n      new H.mapevents.Behavior(new H.mapevents.MapEvents(newMap));\n      H.ui.UI.createDefault(newMap, defaultLayers);\n      map.current = newMap;\n    }\n\n    // ✅ 当餐厅位置变化时计算路线\n    if (restaurantPosition) {\n      calculateRoute(platform.current, map.current, userPosition, restaurantPosition);\n    }\n  }, [apikey, userPosition, restaurantPosition]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '500px'\n    },\n    ref: mapRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 12\n  }, this);\n};\n_s(Map, \"xsT/F+AWmDZ03OBlNxNGHBv3aM4=\");\n_c = Map;\nfunction getMarkerIcon(color) {\n  const svgCircle = `<svg width=\"20\" height=\"20\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                <g id=\"marker\">\n                <circle cx=\"10\" cy=\"10\" r=\"7\" fill=\"${color}\" stroke=\"${color}\" stroke-width=\"4\" />\n                </g></svg>`;\n  return new H.map.Icon(svgCircle, {\n    anchor: {\n      x: 10,\n      y: 10\n    }\n  });\n}\nfunction calculateRoute(platform, map, start, destination) {\n  function routeResponseHandler(response) {\n    const sections = response.routes[0].sections;\n    const lineStrings = [];\n    sections.forEach(section => {\n      // convert Flexible Polyline encoded string to geometry\n      lineStrings.push(H.geo.LineString.fromFlexiblePolyline(section.polyline));\n    });\n    const multiLineString = new H.geo.MultiLineString(lineStrings);\n    const bounds = multiLineString.getBoundingBox();\n\n    // Create the polyline for the route\n    const routePolyline = new H.map.Polyline(multiLineString, {\n      style: {\n        lineWidth: 5\n      }\n    });\n\n    // Remove all the previous map objects, if any\n    map.removeObjects(map.getObjects());\n    // Add the polyline to the map\n    map.addObject(routePolyline);\n    map.addObjects([\n    // Add a marker for the user\n    new H.map.Marker(start, {\n      icon: getMarkerIcon('red')\n    }),\n    // Add a marker for the selected restaurant\n    new H.map.Marker(destination, {\n      icon: getMarkerIcon('green')\n    })]);\n    // Configure the map view to automatically zoom into the bounds\n    // encompassing markers and route polyline:\n    map.getViewModel().setLookAtData({\n      bounds\n    });\n  }\n\n  // Get an instance of the H.service.RoutingService8 service\n  const router = platform.getRoutingService(null, 8);\n\n  // Define the routing service parameters\n  const routingParams = {\n    'origin': `${start.lat},${start.lng}`,\n    'destination': `${destination.lat},${destination.lng}`,\n    'transportMode': 'car',\n    'return': 'polyline'\n  };\n  // Call the routing service with the defined parameters\n  router.calculateRoute(routingParams, routeResponseHandler, console.error);\n}\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["Map","props","_s","mapRef","useRef","map","platform","apikey","userPosition","restaurantPosition","useEffect","current","H","service","Platform","defaultLayers","createDefaultLayers","pois","newMap","vector","normal","zoom","center","mapevents","Behavior","MapEvents","ui","UI","createDefault","calculateRoute","_jsxDEV","style","width","height","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","getMarkerIcon","color","svgCircle","Icon","anchor","x","y","start","destination","routeResponseHandler","response","sections","routes","lineStrings","forEach","section","push","geo","LineString","fromFlexiblePolyline","polyline","multiLineString","MultiLineString","bounds","getBoundingBox","routePolyline","Polyline","lineWidth","removeObjects","getObjects","addObject","addObjects","Marker","icon","getViewModel","setLookAtData","router","getRoutingService","routingParams","lat","lng","console","error","$RefreshReg$"],"sources":["C:/Users/caiwenliang/Desktop/Course/courseWork/cycle_web/src/Map.js"],"sourcesContent":["const Map = (props) => {\r\n    const mapRef = useRef(null);\r\n    const map = useRef(null);\r\n    const platform = useRef(null);\r\n    const { apikey, userPosition, restaurantPosition } = props;\r\n\r\n    useEffect(() => {\r\n        if (!map.current) {\r\n            platform.current = new H.service.Platform({ apikey });\r\n            const defaultLayers = platform.current.createDefaultLayers({ pois: true });\r\n            const newMap = new H.Map(\r\n                mapRef.current,\r\n                defaultLayers.vector.normal.map,\r\n                {\r\n                    zoom: 14,\r\n                    center: userPosition, // ✅ 使用动态用户位置\r\n                }\r\n            );\r\n\r\n            new H.mapevents.Behavior(new H.mapevents.MapEvents(newMap));\r\n            H.ui.UI.createDefault(newMap, defaultLayers);\r\n            map.current = newMap;\r\n        }\r\n\r\n        // ✅ 当餐厅位置变化时计算路线\r\n        if (restaurantPosition) {\r\n            calculateRoute(platform.current, map.current, userPosition, restaurantPosition);\r\n        }\r\n    }, [apikey, userPosition, restaurantPosition]);\r\n\r\n    return <div style={{ width: '100%', height: '500px' }} ref={mapRef} />;\r\n};\r\n\r\nfunction getMarkerIcon(color) {\r\n    const svgCircle = `<svg width=\"20\" height=\"20\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <g id=\"marker\">\r\n                <circle cx=\"10\" cy=\"10\" r=\"7\" fill=\"${color}\" stroke=\"${color}\" stroke-width=\"4\" />\r\n                </g></svg>`;\r\n    return new H.map.Icon(svgCircle, {\r\n        anchor: { x: 10, y: 10 }\r\n    });\r\n}\r\n\r\nfunction calculateRoute(platform, map, start, destination) {\r\n    function routeResponseHandler(response) {\r\n        const sections = response.routes[0].sections;\r\n        const lineStrings = [];\r\n        sections.forEach((section) => {\r\n            // convert Flexible Polyline encoded string to geometry\r\n            lineStrings.push(H.geo.LineString.fromFlexiblePolyline(section.polyline));\r\n        });\r\n        const multiLineString = new H.geo.MultiLineString(lineStrings);\r\n        const bounds = multiLineString.getBoundingBox();\r\n\r\n        // Create the polyline for the route\r\n        const routePolyline = new H.map.Polyline(multiLineString, {\r\n            style: {\r\n                lineWidth: 5\r\n            }\r\n        });\r\n\r\n        // Remove all the previous map objects, if any\r\n        map.removeObjects(map.getObjects());\r\n        // Add the polyline to the map\r\n        map.addObject(routePolyline);\r\n        map.addObjects([\r\n            // Add a marker for the user\r\n            new H.map.Marker(start, {\r\n                icon: getMarkerIcon('red')\r\n            }),\r\n            // Add a marker for the selected restaurant\r\n            new H.map.Marker(destination, {\r\n                icon: getMarkerIcon('green')\r\n            })\r\n        ]);\r\n        // Configure the map view to automatically zoom into the bounds\r\n        // encompassing markers and route polyline:\r\n        map.getViewModel().setLookAtData({ bounds });\r\n    }\r\n\r\n    // Get an instance of the H.service.RoutingService8 service\r\n    const router = platform.getRoutingService(null, 8);\r\n\r\n    // Define the routing service parameters\r\n    const routingParams = {\r\n        'origin': `${start.lat},${start.lng}`,\r\n        'destination': `${destination.lat},${destination.lng}`,\r\n        'transportMode': 'car',\r\n        'return': 'polyline'\r\n    };\r\n    // Call the routing service with the defined parameters\r\n    router.calculateRoute(routingParams, routeResponseHandler, console.error);\r\n}\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}