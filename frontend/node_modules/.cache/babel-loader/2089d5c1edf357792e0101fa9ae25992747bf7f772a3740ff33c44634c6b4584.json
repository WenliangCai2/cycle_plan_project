{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caiwenliang\\\\Desktop\\\\Course\\\\courseWork\\\\cycle_web\\\\src\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map({\n  apikey,\n  selectedLocations,\n  selectedRoute\n}) {\n  _s();\n  useEffect(() => {\n    const platform = new window.H.service.Platform({\n      apikey\n    });\n    const defaultLayers = platform.createDefaultLayers();\n    const mapContainer = document.getElementById(\"map-container\");\n\n    // 初始化地图\n    const map = new window.H.Map(mapContainer, defaultLayers.vector.normal.map, {\n      zoom: 12,\n      center: {\n        lat: 37.7749,\n        lng: -122.4194\n      }\n    });\n\n    // 添加事件监听\n    new window.H.mapevents.Behavior(new window.H.mapevents.MapEvents(map));\n    window.addEventListener(\"resize\", () => map.getViewPort().resize());\n\n    // 绘制选中的餐厅标记\n    selectedLocations.forEach(loc => {\n      const marker = new window.H.map.Marker(loc);\n      map.addObject(marker);\n    });\n\n    // 如果选中了一个路线，则绘制该路线\n    if (selectedRoute) {\n      drawRoute(map, platform, selectedRoute.locations);\n    }\n    return () => {\n      map.dispose();\n    };\n  }, [apikey, selectedLocations, selectedRoute]);\n  const drawRoute = (map, platform, locations) => {\n    if (!locations.length) return;\n    const router = platform.getRoutingService(null, 8);\n    const waypoints = locations.map((loc, index) => `waypoint${index}=geo!${loc.lat},${loc.lng}`).join('&');\n    const routeRequest = {\n      mode: \"fastest;car\",\n      waypoint0: `geo!${locations[0].lat},${locations[0].lng}`,\n      waypoint1: `geo!${locations[locations.length - 1].lat},${locations[locations.length - 1].lng}`,\n      representation: \"display\"\n    };\n    router.calculateRoute(routeRequest, result => {\n      if (result.response) {\n        const route = result.response.route[0];\n        const routeShape = route.shape.map(point => {\n          const parts = point.split(\",\");\n          return {\n            lat: parseFloat(parts[0]),\n            lng: parseFloat(parts[1])\n          };\n        });\n        const lineString = new window.H.geo.LineString();\n        routeShape.forEach(point => lineString.pushPoint(point));\n        const routePolyline = new window.H.map.Polyline(lineString, {\n          style: {\n            strokeColor: \"blue\",\n            lineWidth: 4\n          }\n        });\n        map.addObject(routePolyline);\n      }\n    }, error => {\n      console.error(\"路线计算失败\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\",\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 12\n  }, this);\n}\n_s(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Map","apikey","selectedLocations","selectedRoute","_s","platform","window","H","service","Platform","defaultLayers","createDefaultLayers","mapContainer","document","getElementById","map","vector","normal","zoom","center","lat","lng","mapevents","Behavior","MapEvents","addEventListener","getViewPort","resize","forEach","loc","marker","Marker","addObject","drawRoute","locations","dispose","length","router","getRoutingService","waypoints","index","join","routeRequest","mode","waypoint0","waypoint1","representation","calculateRoute","result","response","route","routeShape","shape","point","parts","split","parseFloat","lineString","geo","LineString","pushPoint","routePolyline","Polyline","style","strokeColor","lineWidth","error","console","id","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/caiwenliang/Desktop/Course/courseWork/cycle_web/src/Map.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nfunction Map({ apikey, selectedLocations, selectedRoute }) {\r\n    useEffect(() => {\r\n        const platform = new window.H.service.Platform({ apikey });\r\n        const defaultLayers = platform.createDefaultLayers();\r\n        const mapContainer = document.getElementById(\"map-container\");\r\n\r\n        // 初始化地图\r\n        const map = new window.H.Map(\r\n            mapContainer,\r\n            defaultLayers.vector.normal.map,\r\n            {\r\n                zoom: 12,\r\n                center: { lat: 37.7749, lng: -122.4194 }\r\n            }\r\n        );\r\n\r\n        // 添加事件监听\r\n        new window.H.mapevents.Behavior(new window.H.mapevents.MapEvents(map));\r\n        window.addEventListener(\"resize\", () => map.getViewPort().resize());\r\n\r\n        // 绘制选中的餐厅标记\r\n        selectedLocations.forEach(loc => {\r\n            const marker = new window.H.map.Marker(loc);\r\n            map.addObject(marker);\r\n        });\r\n\r\n        // 如果选中了一个路线，则绘制该路线\r\n        if (selectedRoute) {\r\n            drawRoute(map, platform, selectedRoute.locations);\r\n        }\r\n\r\n        return () => {\r\n            map.dispose();\r\n        };\r\n    }, [apikey, selectedLocations, selectedRoute]);\r\n\r\n    const drawRoute = (map, platform, locations) => {\r\n        if (!locations.length) return;\r\n\r\n        const router = platform.getRoutingService(null, 8);\r\n        const waypoints = locations.map((loc, index) => `waypoint${index}=geo!${loc.lat},${loc.lng}`).join('&');\r\n\r\n        const routeRequest = {\r\n            mode: \"fastest;car\",\r\n            waypoint0: `geo!${locations[0].lat},${locations[0].lng}`,\r\n            waypoint1: `geo!${locations[locations.length - 1].lat},${locations[locations.length - 1].lng}`,\r\n            representation: \"display\"\r\n        };\r\n\r\n        router.calculateRoute(routeRequest, (result) => {\r\n            if (result.response) {\r\n                const route = result.response.route[0];\r\n                const routeShape = route.shape.map(point => {\r\n                    const parts = point.split(\",\");\r\n                    return { lat: parseFloat(parts[0]), lng: parseFloat(parts[1]) };\r\n                });\r\n\r\n                const lineString = new window.H.geo.LineString();\r\n                routeShape.forEach(point => lineString.pushPoint(point));\r\n\r\n                const routePolyline = new window.H.map.Polyline(lineString, {\r\n                    style: { strokeColor: \"blue\", lineWidth: 4 }\r\n                });\r\n\r\n                map.addObject(routePolyline);\r\n            }\r\n        }, (error) => {\r\n            console.error(\"路线计算失败\", error);\r\n        });\r\n    };\r\n\r\n    return <div id=\"map-container\" style={{ width: \"100%\", height: \"100%\" }} />;\r\n}\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}