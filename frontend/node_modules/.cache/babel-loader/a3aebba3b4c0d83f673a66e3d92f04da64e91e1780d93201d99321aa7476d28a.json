{"ast":null,"code":"/**\r\n * 认证相关API服务\r\n */\nimport axios from 'axios';\n\n// API基础URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 添加认证token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = token;\n  }\n  return config;\n}, error => {\n  console.error('请求拦截器错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 统一处理错误\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API响应错误:', error);\n  return Promise.reject(error);\n});\n\n/**\r\n * 用户注册\r\n * @param {string} username - 用户名\r\n * @param {string} password - 密码\r\n * @returns {Promise} - 包含注册结果的Promise\r\n */\nexport const register = async (username, password) => {\n  try {\n    console.log('发送注册请求:', {\n      username,\n      password: '******'\n    });\n    const response = await api.post('/register', {\n      username,\n      password\n    });\n    console.log('注册响应:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('注册错误:', error);\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      success: false,\n      message: '注册失败，服务器错误'\n    };\n  }\n};\n\n/**\r\n * 用户登录\r\n * @param {string} username - 用户名\r\n * @param {string} password - 密码\r\n * @returns {Promise} - 包含登录结果的Promise\r\n */\nexport const login = async (username, password) => {\n  try {\n    console.log('发送登录请求:', {\n      username,\n      password: '******'\n    });\n    const response = await api.post('/login', {\n      username,\n      password\n    });\n    console.log('登录响应:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('登录错误:', error);\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      success: false,\n      message: '登录失败，服务器错误'\n    };\n  }\n};\n\n/**\r\n * 检查用户是否已登录\r\n * @returns {boolean} - 用户是否已登录\r\n */\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('token');\n};\n\n/**\r\n * 获取当前登录的用户ID\r\n * @returns {string|null} - 用户ID或null\r\n */\nexport const getCurrentUserId = () => {\n  return localStorage.getItem('userId');\n};\n\n/**\r\n * 用户退出登录\r\n * @returns {Promise} - 包含退出结果的Promise\r\n */\nexport const logout = async () => {\n  try {\n    const response = await api.post('/logout');\n    // 无论后端响应如何，都清除本地存储\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    // 即使请求失败，也清除本地存储\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n      success: false,\n      message: '退出登录失败'\n    };\n  }\n};\nexport default {\n  register,\n  login,\n  isAuthenticated,\n  getCurrentUserId,\n  logout\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","console","Promise","reject","response","register","username","password","log","post","data","_error$response","success","message","login","_error$response2","isAuthenticated","getCurrentUserId","logout","removeItem","_error$response3"],"sources":["C:/Users/caiwenliang/PycharmProjects/React-Flask-demo2/frontend/src/api/authApi.js"],"sourcesContent":["/**\r\n * 认证相关API服务\r\n */\r\nimport axios from 'axios';\r\n\r\n// API基础URL\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器 - 添加认证token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = token;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('请求拦截器错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器 - 统一处理错误\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API响应错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * 用户注册\r\n * @param {string} username - 用户名\r\n * @param {string} password - 密码\r\n * @returns {Promise} - 包含注册结果的Promise\r\n */\r\nexport const register = async (username, password) => {\r\n  try {\r\n    console.log('发送注册请求:', { username, password: '******' });\r\n    const response = await api.post('/register', { username, password });\r\n    console.log('注册响应:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('注册错误:', error);\r\n    throw error.response?.data || { success: false, message: '注册失败，服务器错误' };\r\n  }\r\n};\r\n\r\n/**\r\n * 用户登录\r\n * @param {string} username - 用户名\r\n * @param {string} password - 密码\r\n * @returns {Promise} - 包含登录结果的Promise\r\n */\r\nexport const login = async (username, password) => {\r\n  try {\r\n    console.log('发送登录请求:', { username, password: '******' });\r\n    const response = await api.post('/login', { username, password });\r\n    console.log('登录响应:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('登录错误:', error);\r\n    throw error.response?.data || { success: false, message: '登录失败，服务器错误' };\r\n  }\r\n};\r\n\r\n/**\r\n * 检查用户是否已登录\r\n * @returns {boolean} - 用户是否已登录\r\n */\r\nexport const isAuthenticated = () => {\r\n  return !!localStorage.getItem('token');\r\n};\r\n\r\n/**\r\n * 获取当前登录的用户ID\r\n * @returns {string|null} - 用户ID或null\r\n */\r\nexport const getCurrentUserId = () => {\r\n  return localStorage.getItem('userId');\r\n};\r\n\r\n/**\r\n * 用户退出登录\r\n * @returns {Promise} - 包含退出结果的Promise\r\n */\r\nexport const logout = async () => {\r\n  try {\r\n    const response = await api.post('/logout');\r\n    // 无论后端响应如何，都清除本地存储\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userId');\r\n    return response.data;\r\n  } catch (error) {\r\n    // 即使请求失败，也清除本地存储\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userId');\r\n    throw error.response?.data || { success: false, message: '退出登录失败' };\r\n  }\r\n};\r\n\r\nexport default {\r\n  register,\r\n  login,\r\n  isAuthenticated,\r\n  getCurrentUserId,\r\n  logout,\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}